// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  phone               String?              @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  accounts            Account[]
  sessions            Session[]
  agencies            Company[]
  locations           Location[]
  Auth_Buddy_API_Keys Auth_Buddy_API_Key[]
  Log                 Log[]
}

model Location {
  id            String   @id @default(uuid())
  companyId     String?
  Company       Company? @relation(fields: [companyId], references: [id])
  User          User?    @relation(fields: [userId], references: [id])
  name          String?
  access_token  String   @db.Text
  refresh_token String   @db.Text
  issueDate     DateTime
  userId        String?
  Log           Log[]
}

model Company {
  id        String     @id @default(uuid())
  companyId String
  name      String
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?
  Location  Location[]
}

model Auth_Buddy_API_Key {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  apiKey         String   @db.Text
  generationDate DateTime @default(now())
  userId         String
}

model Log {
  id             String   @id @default(cuid())
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  Location       Location @relation(fields: [locationId], references: [id])
  locationId     String
  executionDate  DateTime
  requestMethod  String
  responseStatus Int
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
