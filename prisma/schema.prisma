generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  phone               String?              @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  accounts            Account[]
  Auth_Buddy_API_Keys Auth_Buddy_API_Key[]
  agencies            Company[]
  locations           Location[]
  Log                 Log[]
  sessions            Session[]
}

model Location {
  id             String   @id @default(uuid())
  companyId      String?
  Company        Company? @relation(fields: [companyId], references: [id])
  User           User?    @relation(fields: [userId], references: [id])
  name           String?
  access_token   String   @db.Text
  refresh_token  String   @db.Text
  generationDate DateTime @default(now())
  expires_in     Int
  userId         String?
  Log            Log[]
}

model Company {
  id             String     @id @default(uuid())
  companyId      String
  name           String
  access_token   String     @db.Text
  refresh_token  String     @db.Text
  generationDate DateTime   @default(now())
  expires_in     Int
  User           User?      @relation(fields: [userId], references: [id])
  userId         String?
  Location       Location[]
}

model Auth_Buddy_API_Key {
  id             String   @id @default(uuid())
  apiKey         String
  generationDate DateTime @default(now())
  expires_in     Int
  userId         String
  user           User     @relation(fields: [userId], references: [id])
}

model Log {
  id             String   @id @default(cuid())
  userId         String
  locationId     String
  executionDate  DateTime
  requestMethod  String
  responseStatus Int
  Location       Location @relation(fields: [locationId], references: [id])
  User           User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
